pipeline {

    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }

    agent any

    stages {
        stage('Terraform Version') {
            steps {
                echo 'Checking Terraform Version...'
                sh 'terraform --version'
            }
        }
        stage('Terraform format') {
            steps {
                echo 'Running Terraform Formatting...'
                sh 'terraform fmt || true'  // Prevent failure on warnings
            }
        }		
      stage('Terraform Init') {
    steps {
        echo 'Initializing Terraform...'
        sh 'terraform init -migrate-state'
    }
}

        stage('Terraform Plan') {
            steps {
                echo 'Generating Terraform Plan...'
                withCredentials([aws(credentialsId: 'terraform-aws-airindia-jenkins', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'terraform plan -var-file=terraform.tfvars -out=tfplan.binary'
                    sh 'terraform show tfplan.binary > tfplan.txt'
                }
            }
        }
        stage('Approval') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }

            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?",
                        parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                }
            }
        }       
        stage('Terraform Apply') {
            steps {
                echo 'Applying Terraform Configuration...'
                withCredentials([aws(credentialsId: 'terraform-aws-airindia-jenkins', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'terraform apply --auto-approve tfplan.binary'
                }
            }
        }
        stage('Cleanup') {
            steps {
                echo 'Cleaning up temporary files...'
                sh 'rm -f tfplan.binary tfplan.txt'
            }
        }
	}
}
